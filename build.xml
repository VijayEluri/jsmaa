<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. -->
<project basedir="." default="build" name="jsmaa">
    <property environment="env"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.5"/>
	<property name="junit.output.dir" value="junit"/>	
    <property name="source" value="1.5"/>
    <path id="JUnit 4.libraryclasspath">
        <pathelement location="${ECLIPSE_HOME}/plugins/org.junit4_4.3.1/junit.jar"/>
    </path>
    <path id="jsmaa.classpath">
        <pathelement location="bin"/>
        <pathelement location="lib/binding-2.0.6.jar"/>
        <pathelement location="lib/forms-1.2.1.jar"/>
        <pathelement location="lib/looks-2.2.1.jar"/>
    </path>
	
	<path id="test.classpath">
		<path refid="jsmaa.classpath" />
        <pathelement location="lib/test/easymock.jar"/>    	
        <pathelement location="lib/test/junit.jar"/>
	</path>
	
	<path id="dist.class.path">
		<path refid="jsmaa.classpath" />
	</path>

	<pathconvert property="dist-class-path" pathsep=" " dirsep="/">
		<path refid="dist.class.path" />
		<map from="${basedir}" to="." />		
	</pathconvert>
	
	<target name="dist" depends="build">
			<delete dir="dist" />
			<mkdir dir="dist" />
			<mkdir dir="dist/lib" />
			<copy todir="dist/lib" includeemptydirs="false">
				<!-- <path refid="dist.class.path" /> -->
				<fileset dir="lib" excludes="test/*"/>
			</copy>

			<jar destfile="dist/jsmaa.jar" basedir="bin" excludes="**/test/*">
				<manifest>
					<attribute name="Main-Class" value="fi.smaa.jsmaa.JSMAAMain" />
					<attribute name="Class-Path" value="${dist-class-path}" />
				</manifest>
			</jar>
		</target>
	
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src" excludes="**/*.launch, **/*.java"/>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    	<delete dir="junit"/>
    </target>
    <target depends="build-project" name="build"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="test.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
	<target name="test" depends="build">
		<mkdir dir="${junit.output.dir}"/>
		<junit fork="yes" printsummary="withOutAndErr" haltonfailure="true">
			<formatter type="xml"/>
			<classpath refid="test.classpath"/>	
			<batchtest todir="${junit.output.dir}">
				<fileset dir="bin/">
					<include name="**/*test/*Test.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>	
	<target name="junitreport">
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${junit.output.dir}"/>
		</junitreport>
	</target>	
</project>
